{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/wps/Arquivos/Estudos/Cursos/Arquivos fonte/ReactOS/NLW-05/podcastr-next/src/contexts/PlayerContext.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { createContext, useState, useContext } from 'react';\nexport var PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState([]),\n      episodeList = _useState[0],\n      setEpisodeList = _useState[1];\n\n  var _useState2 = useState(0),\n      currentEpisodeIndex = _useState2[0],\n      setCurrentEpisodeIndex = _useState2[1];\n\n  var _useState3 = useState(false),\n      isPlaying = _useState3[0],\n      setIsPlaying = _useState3[1];\n\n  var _useState4 = useState(false),\n      isLooping = _useState4[0],\n      setIsLooping = _useState4[1];\n\n  var _useState5 = useState(false),\n      isShuffling = _useState5[0],\n      setIsShuffling = _useState5[1];\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  var hasPrevious = currentEpisodeIndex > 0;\n  var hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (isShuffling) {\n      var nexrRandomEpisodeIndex = Math.random();\n    } else if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList: episodeList,\n      currentEpisodeIndex: currentEpisodeIndex,\n      play: play,\n      playList: playList,\n      playNext: playNext,\n      playPrevious: playPrevious,\n      isPlaying: isPlaying,\n      isLooping: isLooping,\n      isShuffling: isShuffling,\n      togglePlay: togglePlay,\n      toggleLoop: toggleLoop,\n      toggleShuffle: toggleShuffle,\n      setPlayingState: setPlayingState,\n      hasNext: hasNext,\n      hasPrevious: hasPrevious\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PlayerContextProvider, \"YSXWY8OfLfVxd5To+FHcHi+GAY0=\");\n\n_c = PlayerContextProvider;\nexport var usePlayer = function usePlayer() {\n  _s2();\n\n  return useContext(PlayerContext);\n};\n\n_s2(usePlayer, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\n\nvar _c;\n\n$RefreshReg$(_c, \"PlayerContextProvider\");","map":{"version":3,"sources":["/home/wps/Arquivos/Estudos/Cursos/Arquivos fonte/ReactOS/NLW-05/podcastr-next/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","useContext","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffling","setIsShuffling","play","episode","playList","list","index","togglePlay","toggleLoop","toggleShuffle","setPlayingState","state","hasPrevious","hasNext","length","playNext","nexrRandomEpisodeIndex","Math","random","playPrevious","usePlayer"],"mappings":"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","sourcesContent":["import { createContext, useState, ReactNode, useContext } from 'react'\n\ntype Episode = {\n    title: string;\n    members: string;\n    thumbnail: string;\n    duration: number;\n    url: string;\n};\n\ntype PlayerContextData = {\n    episodeList: Episode[];\n    currentEpisodeIndex: number;\n    isPlaying: boolean;\n    isLooping: boolean;\n    isShuffling: boolean;\n    hasNext: boolean;\n    hasPrevious: boolean;\n    play: (episode: Episode) => void;\n    playList: (list: Episode[], index: number) => void;\n    togglePlay: () => void;\n    toggleLoop: () => void;\n    toggleShuffle: () => void;\n    playNext: () => void;\n    playPrevious: () => void;\n    setPlayingState: (state: boolean) => void;\n};\n\ntype PlayerContextProviderProps = {\n    children: ReactNode;\n}\n\nexport const PlayerContext = createContext({} as PlayerContextData);\n\nexport function PlayerContextProvider({ children }: PlayerContextProviderProps) {\n    const [episodeList, setEpisodeList] = useState([]);\n    const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [isLooping, setIsLooping] = useState(false);\n    const [isShuffling, setIsShuffling] = useState(false);\n\n    function play(episode: Episode) {\n        setEpisodeList([episode]);\n        setCurrentEpisodeIndex(0);\n        setIsPlaying(true);\n    }\n\n    function playList(list: Episode[], index: number) {\n        setEpisodeList(list);\n        setCurrentEpisodeIndex(index);\n        setIsPlaying(true);\n    }\n\n    function togglePlay() {\n        setIsPlaying(!isPlaying);\n    }\n\n    function toggleLoop() {\n        setIsLooping(!isLooping);\n    }\n\n    function toggleShuffle() {\n        setIsShuffling(!isShuffling);\n    }\n\n    function setPlayingState(state: boolean) {\n        setIsPlaying(state);\n    }\n\n    const hasPrevious = currentEpisodeIndex > 0;\n    const hasNext = (currentEpisodeIndex + 1) < episodeList.length;\n\n\n    function playNext() {\n        if (isShuffling) {\n            const  nexrRandomEpisodeIndex = Math.random()\n        } else if (hasNext) {\n\n            setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n        }\n    }\n\n    function playPrevious() {\n        if (hasPrevious) {\n\n            setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n        }\n    }\n    return (\n        <PlayerContext.Provider value={{\n            episodeList,\n            currentEpisodeIndex,\n            play,\n            playList,\n            playNext,\n            playPrevious,\n            isPlaying,\n            isLooping,\n            isShuffling,\n            togglePlay,\n            toggleLoop,\n            toggleShuffle,\n            setPlayingState,\n            hasNext,\n            hasPrevious,\n        }}>\n            {children}\n        </PlayerContext.Provider>\n    )\n}\n\nexport const usePlayer = () => {\n    return useContext(PlayerContext)\n}"]},"metadata":{},"sourceType":"module"}