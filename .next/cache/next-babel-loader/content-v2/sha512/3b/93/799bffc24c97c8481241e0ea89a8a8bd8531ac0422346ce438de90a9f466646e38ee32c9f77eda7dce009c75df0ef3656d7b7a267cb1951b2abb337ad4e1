{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/wps/Arquivos/Estudos/Cursos/Arquivos fonte/ReactOS/NLW-05/podcastr-next/src/contexts/PlayerContext.tsx\";\nimport { createContext, useState, useContext } from 'react';\nexport const PlayerContext = /*#__PURE__*/createContext({});\nexport function PlayerContextProvider({\n  children\n}) {\n  const {\n    0: episodeList,\n    1: setEpisodeList\n  } = useState([]);\n  const {\n    0: currentEpisodeIndex,\n    1: setCurrentEpisodeIndex\n  } = useState(0);\n  const {\n    0: isPlaying,\n    1: setIsPlaying\n  } = useState(false);\n  const {\n    0: isLooping,\n    1: setIsLooping\n  } = useState(false);\n  const {\n    0: isShuffling,\n    1: setIsShuffling\n  } = useState(false);\n\n  function play(episode) {\n    setEpisodeList([episode]);\n    setCurrentEpisodeIndex(0);\n    setIsPlaying(true);\n  }\n\n  function playList(list, index) {\n    setEpisodeList(list);\n    setCurrentEpisodeIndex(index);\n    setIsPlaying(true);\n  }\n\n  function togglePlay() {\n    setIsPlaying(!isPlaying);\n  }\n\n  function toggleLoop() {\n    setIsLooping(!isLooping);\n  }\n\n  function toggleShuffle() {\n    setIsShuffling(!isShuffling);\n  }\n\n  function setPlayingState(state) {\n    setIsPlaying(state);\n  }\n\n  const hasPrevious = currentEpisodeIndex > 0;\n  const hasNext = currentEpisodeIndex + 1 < episodeList.length;\n\n  function playNext() {\n    if (isShuffling) {} else if (hasNext) {\n      setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n    }\n  }\n\n  function playPrevious() {\n    if (hasPrevious) {\n      setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(PlayerContext.Provider, {\n    value: {\n      episodeList,\n      currentEpisodeIndex,\n      play,\n      playList,\n      playNext,\n      playPrevious,\n      isPlaying,\n      isLooping,\n      isShuffling,\n      togglePlay,\n      toggleLoop,\n      toggleShuffle,\n      setPlayingState,\n      hasNext,\n      hasPrevious\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 9\n  }, this);\n}\nexport const usePlayer = () => {\n  return useContext(PlayerContext);\n};","map":{"version":3,"sources":["/home/wps/Arquivos/Estudos/Cursos/Arquivos fonte/ReactOS/NLW-05/podcastr-next/src/contexts/PlayerContext.tsx"],"names":["createContext","useState","useContext","PlayerContext","PlayerContextProvider","children","episodeList","setEpisodeList","currentEpisodeIndex","setCurrentEpisodeIndex","isPlaying","setIsPlaying","isLooping","setIsLooping","isShuffling","setIsShuffling","play","episode","playList","list","index","togglePlay","toggleLoop","toggleShuffle","setPlayingState","state","hasPrevious","hasNext","length","playNext","playPrevious","usePlayer"],"mappings":";;AAAA,SAASA,aAAT,EAAwBC,QAAxB,EAA6CC,UAA7C,QAA+D,OAA/D;AAgCA,OAAO,MAAMC,aAAa,gBAAGH,aAAa,CAAC,EAAD,CAAnC;AAEP,OAAO,SAASI,qBAAT,CAA+B;AAAEC,EAAAA;AAAF,CAA/B,EAAyE;AAC5E,QAAM;AAAA,OAACC,WAAD;AAAA,OAAcC;AAAd,MAAgCN,QAAQ,CAAC,EAAD,CAA9C;AACA,QAAM;AAAA,OAACO,mBAAD;AAAA,OAAsBC;AAAtB,MAAgDR,QAAQ,CAAC,CAAD,CAA9D;AACA,QAAM;AAAA,OAACS,SAAD;AAAA,OAAYC;AAAZ,MAA4BV,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACW,SAAD;AAAA,OAAYC;AAAZ,MAA4BZ,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM;AAAA,OAACa,WAAD;AAAA,OAAcC;AAAd,MAAgCd,QAAQ,CAAC,KAAD,CAA9C;;AAEA,WAASe,IAAT,CAAcC,OAAd,EAAgC;AAC5BV,IAAAA,cAAc,CAAC,CAACU,OAAD,CAAD,CAAd;AACAR,IAAAA,sBAAsB,CAAC,CAAD,CAAtB;AACAE,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;;AAED,WAASO,QAAT,CAAkBC,IAAlB,EAAmCC,KAAnC,EAAkD;AAC9Cb,IAAAA,cAAc,CAACY,IAAD,CAAd;AACAV,IAAAA,sBAAsB,CAACW,KAAD,CAAtB;AACAT,IAAAA,YAAY,CAAC,IAAD,CAAZ;AACH;;AAED,WAASU,UAAT,GAAsB;AAClBV,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACH;;AAED,WAASY,UAAT,GAAsB;AAClBT,IAAAA,YAAY,CAAC,CAACD,SAAF,CAAZ;AACH;;AAED,WAASW,aAAT,GAAyB;AACrBR,IAAAA,cAAc,CAAC,CAACD,WAAF,CAAd;AACH;;AAED,WAASU,eAAT,CAAyBC,KAAzB,EAAyC;AACrCd,IAAAA,YAAY,CAACc,KAAD,CAAZ;AACH;;AAED,QAAMC,WAAW,GAAGlB,mBAAmB,GAAG,CAA1C;AACA,QAAMmB,OAAO,GAAInB,mBAAmB,GAAG,CAAvB,GAA4BF,WAAW,CAACsB,MAAxD;;AAGA,WAASC,QAAT,GAAoB;AAChB,QAAIf,WAAJ,EAAiB,CAEhB,CAFD,MAEO,IAAIa,OAAJ,EAAa;AAEhBlB,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACH;AACJ;;AAED,WAASsB,YAAT,GAAwB;AACpB,QAAIJ,WAAJ,EAAiB;AAEbjB,MAAAA,sBAAsB,CAACD,mBAAmB,GAAG,CAAvB,CAAtB;AACH;AACJ;;AACD,sBACI,QAAC,aAAD,CAAe,QAAf;AAAwB,IAAA,KAAK,EAAE;AAC3BF,MAAAA,WAD2B;AAE3BE,MAAAA,mBAF2B;AAG3BQ,MAAAA,IAH2B;AAI3BE,MAAAA,QAJ2B;AAK3BW,MAAAA,QAL2B;AAM3BC,MAAAA,YAN2B;AAO3BpB,MAAAA,SAP2B;AAQ3BE,MAAAA,SAR2B;AAS3BE,MAAAA,WAT2B;AAU3BO,MAAAA,UAV2B;AAW3BC,MAAAA,UAX2B;AAY3BC,MAAAA,aAZ2B;AAa3BC,MAAAA,eAb2B;AAc3BG,MAAAA,OAd2B;AAe3BD,MAAAA;AAf2B,KAA/B;AAAA,cAiBKrB;AAjBL;AAAA;AAAA;AAAA;AAAA,UADJ;AAqBH;AAED,OAAO,MAAM0B,SAAS,GAAG,MAAM;AAC3B,SAAO7B,UAAU,CAACC,aAAD,CAAjB;AACH,CAFM","sourcesContent":["import { createContext, useState, ReactNode, useContext } from 'react'\n\ntype Episode = {\n    title: string;\n    members: string;\n    thumbnail: string;\n    duration: number;\n    url: string;\n};\n\ntype PlayerContextData = {\n    episodeList: Episode[];\n    currentEpisodeIndex: number;\n    isPlaying: boolean;\n    isLooping: boolean;\n    isShuffling: boolean;\n    hasNext: boolean;\n    hasPrevious: boolean;\n    play: (episode: Episode) => void;\n    playList: (list: Episode[], index: number) => void;\n    togglePlay: () => void;\n    toggleLoop: () => void;\n    toggleShuffle: () => void;\n    playNext: () => void;\n    playPrevious: () => void;\n    setPlayingState: (state: boolean) => void;\n};\n\ntype PlayerContextProviderProps = {\n    children: ReactNode;\n}\n\nexport const PlayerContext = createContext({} as PlayerContextData);\n\nexport function PlayerContextProvider({ children }: PlayerContextProviderProps) {\n    const [episodeList, setEpisodeList] = useState([]);\n    const [currentEpisodeIndex, setCurrentEpisodeIndex] = useState(0);\n    const [isPlaying, setIsPlaying] = useState(false);\n    const [isLooping, setIsLooping] = useState(false);\n    const [isShuffling, setIsShuffling] = useState(false);\n\n    function play(episode: Episode) {\n        setEpisodeList([episode]);\n        setCurrentEpisodeIndex(0);\n        setIsPlaying(true);\n    }\n\n    function playList(list: Episode[], index: number) {\n        setEpisodeList(list);\n        setCurrentEpisodeIndex(index);\n        setIsPlaying(true);\n    }\n\n    function togglePlay() {\n        setIsPlaying(!isPlaying);\n    }\n\n    function toggleLoop() {\n        setIsLooping(!isLooping);\n    }\n\n    function toggleShuffle() {\n        setIsShuffling(!isShuffling);\n    }\n\n    function setPlayingState(state: boolean) {\n        setIsPlaying(state);\n    }\n\n    const hasPrevious = currentEpisodeIndex > 0;\n    const hasNext = (currentEpisodeIndex + 1) < episodeList.length;\n\n\n    function playNext() {\n        if (isShuffling) {\n\n        } else if (hasNext) {\n\n            setCurrentEpisodeIndex(currentEpisodeIndex + 1);\n        }\n    }\n\n    function playPrevious() {\n        if (hasPrevious) {\n\n            setCurrentEpisodeIndex(currentEpisodeIndex - 1);\n        }\n    }\n    return (\n        <PlayerContext.Provider value={{\n            episodeList,\n            currentEpisodeIndex,\n            play,\n            playList,\n            playNext,\n            playPrevious,\n            isPlaying,\n            isLooping,\n            isShuffling,\n            togglePlay,\n            toggleLoop,\n            toggleShuffle,\n            setPlayingState,\n            hasNext,\n            hasPrevious,\n        }}>\n            {children}\n        </PlayerContext.Provider>\n    )\n}\n\nexport const usePlayer = () => {\n    return useContext(PlayerContext)\n}"]},"metadata":{},"sourceType":"module"}