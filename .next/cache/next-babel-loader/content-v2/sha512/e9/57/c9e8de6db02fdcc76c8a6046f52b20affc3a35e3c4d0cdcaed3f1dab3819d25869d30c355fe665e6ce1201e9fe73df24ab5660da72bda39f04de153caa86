{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/wps/Arquivos/Estudos/Cursos/Arquivos fonte/ReactOS/NLW-05/podcastr-next/src/pages/episodes/[slug].tsx\";\nimport { format, parseISO } from 'date-fns';\nimport ptBR from 'date-fns/locale/pt-BR';\nimport { useRouter } from 'next/router';\nimport { api } from '../../services/api';\nimport { convertDurationToTimeString } from '../../utils/convertDurationToTimeString';\nexport default function Episode({\n  episode\n}) {\n  const router = useRouter();\n  return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: episode.title\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\nexport const getStaticPaths = async () => {};\nexport const getStaticProps = async ctx => {\n  const {\n    slug\n  } = ctx.params;\n  const {\n    data\n  } = await api.get(`/episodes/${slug}`);\n  const episode = {\n    id: data.id,\n    title: data.title,\n    thumbnail: data.thumbnail,\n    members: data.members,\n    publishedAt: format(parseISO(data.published_at), 'd MMM yy', {\n      locale: ptBR\n    }),\n    duration: Number(data.file.duration),\n    durationAsString: convertDurationToTimeString(Number(data.file.duration)),\n    description: data.description,\n    url: data.file.url\n  };\n  return {\n    props: {\n      episode\n    },\n    revalidate: 60 * 60 * 24\n  };\n};","map":{"version":3,"sources":["/home/wps/Arquivos/Estudos/Cursos/Arquivos fonte/ReactOS/NLW-05/podcastr-next/src/pages/episodes/[slug].tsx"],"names":["format","parseISO","ptBR","useRouter","api","convertDurationToTimeString","Episode","episode","router","title","getStaticPaths","getStaticProps","ctx","slug","params","data","get","id","thumbnail","members","publishedAt","published_at","locale","duration","Number","file","durationAsString","description","url","props","revalidate"],"mappings":";;AAAA,SAASA,MAAT,EAAiBC,QAAjB,QAAiC,UAAjC;AACA,OAAOC,IAAP,MAAiB,uBAAjB;AAEA,SAASC,SAAT,QAA0B,aAA1B;AACA,SAASC,GAAT,QAAoB,oBAApB;AACA,SAASC,2BAAT,QAA4C,yCAA5C;AAkBA,eAAe,SAASC,OAAT,CAAiB;AAAEC,EAAAA;AAAF,CAAjB,EAA4C;AAEvD,QAAMC,MAAM,GAAGL,SAAS,EAAxB;AAEA,sBACI;AAAA,cAAKI,OAAO,CAACE;AAAb;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH;AAED,OAAO,MAAMC,cAA8B,GAAG,YAAY,CAEzD,CAFM;AAIP,OAAO,MAAMC,cAA8B,GAAG,MAAOC,GAAP,IAAe;AACzD,QAAM;AAAEC,IAAAA;AAAF,MAAWD,GAAG,CAACE,MAArB;AACA,QAAM;AAAEC,IAAAA;AAAF,MAAW,MAAMX,GAAG,CAACY,GAAJ,CAAS,aAAYH,IAAK,EAA1B,CAAvB;AACA,QAAMN,OAAO,GAAG;AACZU,IAAAA,EAAE,EAAEF,IAAI,CAACE,EADG;AAEZR,IAAAA,KAAK,EAAEM,IAAI,CAACN,KAFA;AAGZS,IAAAA,SAAS,EAAEH,IAAI,CAACG,SAHJ;AAIZC,IAAAA,OAAO,EAAEJ,IAAI,CAACI,OAJF;AAKZC,IAAAA,WAAW,EAAEpB,MAAM,CAACC,QAAQ,CAACc,IAAI,CAACM,YAAN,CAAT,EAA8B,UAA9B,EAA0C;AAAEC,MAAAA,MAAM,EAAEpB;AAAV,KAA1C,CALP;AAMZqB,IAAAA,QAAQ,EAAEC,MAAM,CAACT,IAAI,CAACU,IAAL,CAAUF,QAAX,CANJ;AAOZG,IAAAA,gBAAgB,EAAErB,2BAA2B,CAACmB,MAAM,CAACT,IAAI,CAACU,IAAL,CAAUF,QAAX,CAAP,CAPjC;AAQZI,IAAAA,WAAW,EAAEZ,IAAI,CAACY,WARN;AASZC,IAAAA,GAAG,EAAEb,IAAI,CAACU,IAAL,CAAUG;AATH,GAAhB;AAWA,SAAO;AACHC,IAAAA,KAAK,EAAE;AACHtB,MAAAA;AADG,KADJ;AAIHuB,IAAAA,UAAU,EAAE,KAAK,EAAL,GAAU;AAJnB,GAAP;AAMH,CApBM","sourcesContent":["import { format, parseISO } from 'date-fns';\nimport ptBR from 'date-fns/locale/pt-BR';\nimport { GetStaticPaths, GetStaticProps } from 'next';\nimport { useRouter } from 'next/router';\nimport { api } from '../../services/api';\nimport { convertDurationToTimeString } from '../../utils/convertDurationToTimeString';\n\ntype Episode = {\n    id: string;\n    title: string;\n    thumbnail: string;\n    members: string;\n    duration: number;\n    description: string;\n    durationAsString: string;\n    url: string;\n    publishedAt: string;\n}\n\ntype EpisodeProps = {\n    episode: Episode;\n}\n\nexport default function Episode({ episode }: EpisodeProps) {\n\n    const router = useRouter();\n\n    return (\n        <h1>{episode.title}</h1>\n    )\n}\n\nexport const getStaticPaths: GetStaticPaths = async () => {\n\n}\n\nexport const getStaticProps: GetStaticProps = async (ctx) => {\n    const { slug } = ctx.params;\n    const { data } = await api.get(`/episodes/${slug}`);\n    const episode = {\n        id: data.id,\n        title: data.title,\n        thumbnail: data.thumbnail,\n        members: data.members,\n        publishedAt: format(parseISO(data.published_at), 'd MMM yy', { locale: ptBR }),\n        duration: Number(data.file.duration),\n        durationAsString: convertDurationToTimeString(Number(data.file.duration)),\n        description: data.description,\n        url: data.file.url,\n    };\n    return {\n        props: {\n            episode,\n        },\n        revalidate: 60 * 60 * 24,\n    }\n}"]},"metadata":{},"sourceType":"module"}